{
  "_args": [
    [
      {
        "raw": "react-sound",
        "scope": null,
        "escapedName": "react-sound",
        "name": "react-sound",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Utente\\WebstormProjects\\pomodoro-app"
    ]
  ],
  "_from": "react-sound@latest",
  "_id": "react-sound@1.1.0",
  "_inCache": true,
  "_location": "/react-sound",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-sound-1.1.0.tgz_1516368814352_0.28531822725199163"
  },
  "_npmUser": {
    "name": "leoasis",
    "email": "leoasis@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-sound",
    "scope": null,
    "escapedName": "react-sound",
    "name": "react-sound",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-sound/-/react-sound-1.1.0.tgz",
  "_shasum": "d3647c2cbe8adabc3c6661a804d810f23e81917a",
  "_shrinkwrap": null,
  "_spec": "react-sound",
  "_where": "C:\\Users\\Utente\\WebstormProjects\\pomodoro-app",
  "author": {
    "name": "Leonardo Andres Garcia Crespo",
    "email": "leoasis@gmail.com"
  },
  "dependencies": {
    "prop-types": "^15.5.7",
    "soundmanager2": "^2.97.20170602"
  },
  "description": "React Sound component using soundmanager2",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.1.2",
    "babel-loader": "^7.1.2",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "eslint": "^4.14.0",
    "eslint-plugin-react": "^7.5.1",
    "react": "^16.2.0",
    "react-dom": "^16.2.0",
    "react-hot-loader": "^3.1.3",
    "rimraf": "^2.6.2",
    "webpack": "^3.10.0",
    "webpack-dev-server": "^2.9.7"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ZySUXb4SxLrqnF5O3DUa/MOcfXUhCQXRDe+z+sjEE7LzeezMDog1mxuXbq49POOz2Lbjie4lCr14fVsPyTrUmQ==",
    "shasum": "d3647c2cbe8adabc3c6661a804d810f23e81917a",
    "tarball": "https://registry.npmjs.org/react-sound/-/react-sound-1.1.0.tgz"
  },
  "gitHead": "8f0de395673ec6cef7ebb9ec742223fc98046981",
  "homepage": "https://github.com/leoasis/react-sound",
  "keywords": [
    "react",
    "react-component",
    "sound",
    "soundmanager2"
  ],
  "license": "ISC",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "leoasis",
      "email": "leoasis@gmail.com"
    }
  ],
  "name": "react-sound",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.3.0 || ^16.0.0-0"
  },
  "readme": "# react-sound\n\n[![npm version](https://img.shields.io/npm/v/react-sound.svg?style=flat-square)](https://www.npmjs.com/package/react-sound)\n\nSound component to play audio in your web apps. Backed by the mighty [soundmanager2](https://github.com/scottschiller/SoundManager2) library.\n\n## Example\n\n```js\n// In your React component:\nrender() {\n  return (\n    <Sound\n      url=\"cool_sound.mp3\"\n      playStatus={Sound.status.PLAYING}\n      playFromPosition={300 /* in milliseconds */}\n      onLoading={this.handleSongLoading}\n      onPlaying={this.handleSongPlaying}\n      onFinishedPlaying={this.handleSongFinishedPlaying}\n    />\n  );\n}\n```\n\n## Sound as a component?\n\nYes! It's really easy to use sounds in your app as part of the component tree in your React app.\n\n* **Want to start playing a sound?** Just render it with a `PLAYING` status.\n* **Want to remove a playing sound?** Just stop rendering it.\n* **Want to sync it with your app state?** Render it using props and state, just as with any React component!\n\n## How to install\n\n`npm install react-sound --save`\n\n## How to use\n\n```js\nvar React = require('react');\nvar Sound = require('react-sound').default;\n\n// ... or using import:\nimport React from 'react';\nimport Sound from 'react-sound';\n\nclass MyComponentWithSound extends React.Component {\n  render() {\n    return <Sound {...props} />; // Check props in next section\n  }\n}\n```\n\n**Note:** By default, a restriction on mobile prevent you from playing multiple sounds. To avoid this, you need to set the `ignoreMobileRestrictions` property to `true` when setting up [soundManager2](http://www.schillmania.com/projects/soundmanager2/doc/).\n\n### Props\n\n* *url (string)*: The url of the sound to play.\n* *playStatus (Sound.status.{PLAYING,STOPPED,PAUSED})*: The current sound playing status. Change it in successive renders to play, stop, pause and resume the sound.\n* *playFromPosition (number)*: Seeks to the position specified by this prop, any time it changes. After that, the sound will continue playing (or not, if the `playStatus` is not `PLAYING`). Use this prop to seek to different positions in the sound, but not use it as a controlled component. You should use either this prop or `position`, but not both.\n* *position (number)*: The current position the sound is at. Use this to make the component a controlled component, meaning that you must update this prop on every `onPlaying` callback. You should use either this prop or `playFromPosition`, but not both.\n* *volume (number)*: The current sound's volume. A value between 0 and 100.\n* *playbackRate (number)*: Number affecting sound playback. A value between 0.5 and 4 of normal rate (1).\n* *autoLoad (boolean)*: If the sound should start loading automatically (defaults to `false`).\n* *loop (boolean)*: If the sound should continue playing in a loop (defaults to `false`).\n* *onError (function)*: Function that gets called when the sound fails to load, or fails during load or playback. It receives the arguments `errorCode` and `description` with details about the error.\n* *onLoading (function)*: Function that gets called while the sound is loading. It receives an object with properties `bytesLoaded`, `bytesTotal` and `duration`.\n* *onLoad (function)*: Function that gets called after the sound has finished loading. It receives an object with property `loaded`, a boolean set to true if the sound has finished loading successfully.\n* *onPlaying (function)*: Function that gets called while the sound is playing. It receives an object with properties `position` and `duration`.\n* *onPause (function)*: Function that gets called when the sound is paused. It receives an object with properties `position` and `duration`.\n* *onResume (function)*: Function that gets called while the sound is resumed playing. It receives an object with properties `position` and `duration`.\n* *onStop (function)*: Function that gets called while the sound playback is stopped. It receives an object with properties `position` and `duration`.\n* *onFinishedPlaying (function)*: Function that gets called when the sound finishes playing (reached end of sound). It receives no parameters.\n\n## How to contribute\n\nFeel free to fork and send PRs or issues, be it for features, bug fixes, or documentation!\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "npm run lint && babel src --out-dir lib",
    "clean": "rimraf ./lib",
    "lint": "eslint src test",
    "prepublish": "npm run clean && npm run build",
    "start": "cd examples && webpack-dev-server --port 3000 --progress --inline --hot --devtool eval-source-map"
  },
  "version": "1.1.0"
}
